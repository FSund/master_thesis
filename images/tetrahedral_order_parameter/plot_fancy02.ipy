import os.path
import numpy as np

default_backend = 'Qt4Agg'
default_fig_size = np.array([8.0, 6.0]) # inches
fig_size_reduction_factor = 3.0

renderer = 'SVG'
# renderer = 'AGG'
# renderer = default_backend

import matplotlib
matplotlib.use(renderer)
matplotlib.rcParams['svg.fonttype'] = 'none' # To make text in the resulting svg actual text, instead of a path. 
matplotlib.rcParams['savefig.dpi'] = 150 # Doesn't apply when using svg backend?

import matplotlib.pyplot as plt

if renderer == default_backend:
    plt.ion()

## Settings/load ##
start = 0;
stop = 199;
step = 1;

num_bins = 150;
Q_start = -0.5; 
Q_stop = 1;

distances_start = 0.0;
distances_width = 0.5;
distances_stop = 20;
distances_vec = np.arange(distances_start, distances_stop+1, distances_width)

distances_to_plot = np.array([2.0, 3.5, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0, 8.0, 9.0, 10.0, 10.5])
# distances_to_plot = np.array([2.0, 3.5, 4.5, 5.0, 5.5, 6.0]) # Use just 6 now for testing purposes
# distance_indices = [np.where(distances_vec == distance)[0] for distance in distances_to_plot if np.argwhere(distances_vec == distance).size]
# print distance_indices
# print

# projects_folder = '/home/fsund/Projects'
project_names = ['flat_square_fracture02/10_05_measuring_every_100th_timestep_200steps', 
                 'rough_fracture01_abel/12_04_measuring_every_100th_timestep_200steps']

# Results folder names
results_folder_base = "/home/fsund/Dropbox/Masteroppgave/master/notebooks/tetrahedral_order_parameter"
results_folder_name = "results"
results_folder_numbers = [18, 5]

## Plot ##
def plot_from_file(ax, filename, num_y_col, label, props = dict()):
    data = np.genfromtxt( # makes np.ndarray
        filename,
        skip_header = 1     # skip header
    )
    x = data[:,0]
    y = data[:,num_y_col]

    plot, = ax.plot(x, y, label = "{\\footnotesize %s}" %label, **props)
    return plot

### Plot ##
n_rows = 4
n_cols = 2 # Must be >1
n_plots = n_rows*n_cols
# distance_indices = distance_indices[0:n_plots]
distances_to_plot = distances_to_plot[0:n_plots]

## Create figures, subplots and save axes
fig = plt.figure(figsize = [8.0, 10.0]);
axes = []
[axes.append([None]*n_cols) for i in range(n_rows)]
# print axes

# Create bottom row of plots first, to get x-axes
axes[-1][0] = fig.add_subplot(n_rows, n_cols, (n_plots - n_cols + 1)) # bottom left

# Create rest of the subplots
for i in range(n_rows):
    for j in range(n_cols):
        if (i,j) != (n_rows-1, 0): # skip bottom left
            fig_idx = (i*n_cols + j +1)
            axes[i][j] = fig.add_subplot(n_rows, n_cols, fig_idx, sharex = axes[-1][0], sharey = axes[-1][0])

plots = []
for project_idx, project_name in enumerate(project_names):

    results_folder = os.path.join(results_folder_base, project_name, results_folder_name + "%03d" %results_folder_numbers[project_idx])

    avr_file = os.path.join(results_folder, "avr_TOP_from_dump_nt_%i_Q_%.1f_%.1f_num_bins_%i.txt" %((stop-start)/float(step), Q_start, Q_stop, num_bins))
    hist_file = os.path.join(results_folder, "hist_TOP_from_dump_nt_%i_Q_%.1f_%.1f_num_bins_%i.txt"%((stop-start)/float(step), Q_start, Q_stop, num_bins))

    print "Hist file: \n    \"" + hist_file + "\"\n"
    print "\nAverage file: \n    \"" + avr_file + "\"\n"

    # Plot the histograms, each shell get's its own plot    
    for idx, distance in enumerate(distances_to_plot):
        i = idx/n_cols
        j = idx%n_cols
        ax = axes[i][j]

        ax.hold("on");
        column = np.argwhere(distances_vec == distance)[0]
        plots.append(plot_from_file(ax, hist_file, column, label = "System \\#{:d}".format(project_idx)));

        ax.set_title("\$r = %.1f\$ \\AA" %(distance))
        if i == (n_rows-1):
            ax.set_xlabel("Q")
        if j == 0 and i == 1:
            ax.set_ylabel("relative occurrence")

# Make ticklabels for some plots invisible
for i in range(n_rows-1):
    for j in range(n_cols):
        plt.setp(axes[i][j].get_xticklabels(), visible=False)
for i in range(n_rows):
    for j in range(1,n_cols):
        plt.setp(axes[i][j].get_yticklabels(), visible=False)

# Set limits and ticks
ax = axes[-1][0]
ax.set_ylim([0, 0.022])
ax.set_yticks([0.005, 0.010, 0.015, 0.020])
ax.set_xlim([-0.6, 1.1])
ax.set_xticks([-0.5, 0.0, 0.5, 1.0])

# Stretch subplots a bit
from itertools import chain
for ax in list(chain(*axes)):
    box = ax.get_position()
    ax.set_position([box.x0, box.y0, (box.x1 - box.x0)*1.1, (box.y1 - box.y0)])

## Make legends
ax = axes[0][0]
normal_legtexts = ["System #0", "System #1"]
fancy_legtexts = ["{\\footnotesize System \\#0}", "{\\footnotesize System \\#1}"]

if False:
    ax.legend(fancy_legtexts, bbox_to_anchor = (0.775, 0.05), bbox_transform = fig.transFigure, framealpha = 0.0, borderaxespad = 0)

if True:
    legs = []
    legs.append(ax.legend([plots[0]], [fancy_legtexts[0]], bbox_to_anchor = (1.0, 0.05), bbox_transform = fig.transFigure, framealpha = 0.0))
    legs.append(ax.legend([plots[n_plots]], [fancy_legtexts[1]], bbox_to_anchor = (0.7, 0.05), bbox_transform = fig.transFigure, framealpha = 0.0)) # this removes leg[0] from the axis
    ax.add_artist(legs[0]) # the line above removes legs[0], so we have to add it again here
    # plt.draw()

if False:
    plt.show()
    # First make normal legends
    plt.draw()
    plt.show()
    plt.draw()
    plt.show()
    leg = ax.legend(normal_legtexts, bbox_to_anchor = (0.775, 0.05), bbox_transform = fig.transFigure, borderaxespad = 0)
    plt.show()
    plt.draw()
    bb1 = leg.legendPatch.get_bbox().inverse_transformed(fig.transFigure)

    # Then make LaTeX legends
    leg = ax.legend(fancy_legtexts, bbox_to_anchor = (0.775, 0.05), bbox_transform = fig.transFigure, borderaxespad = 0)
    plt.draw()
    time.sleep(5)
    bb2 = leg.legendPatch.get_bbox().inverse_transformed(fig.transFigure)
    leg.set_bbox_to_anchor([bb1.x1 + (np.abs(bb1.x0-bb2.x0)), bb1.y1], transform = fig.transFigure)
    plt.draw()
    time.sleep(5)


if False:
    # Then the LaTeX legends
    fancy_legtexts = ["{\\footnotesize System \\#0}", "{\\footnotesize System \\#1}"]
    normal_legs.append(ax.legend([plots[0]], ["{\\footnotesize System \\#0}"], bbox_to_anchor = (1.0, 0.05), bbox_transform = fig.transFigure, framealpha = 0.0))
    normal_legs.append(ax.legend([plots[n_plots]], ["{\\footnotesize System \\#1}"], bbox_to_anchor = (0.5, 0.05), bbox_transform = fig.transFigure, framealpha = 0.0)) # this removes leg[0] from the axis

if renderer == default_backend:
    plt.show()

elif renderer == 'SVG':
    fig.savefig("fancyfig.svg", bbox_inches='tight')
