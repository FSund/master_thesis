import os.path
import numpy as np

default_backend = 'Qt4Agg'
default_fig_size = np.array([8.0, 6.0]) # inches
fig_size_reduction_factor = 3.0

renderer = 'SVG'
# renderer = 'AGG'
# renderer = default_backend

import matplotlib
matplotlib.use(renderer)
matplotlib.rcParams['svg.fonttype'] = 'none' # To make text in the resulting svg actual text, instead of a path. 
matplotlib.rcParams['savefig.dpi'] = 150 # Doesn't apply when using svg backend?

import matplotlib.pyplot as plt

if renderer == default_backend:
    plt.ion()

## Settings/load ##
start = 0;
stop = 199;
step = 1;

num_bins = 150;
Q_start = -0.5; 
Q_stop = 1;

distances_start = 0.0;
distances_width = 0.5;
distances_stop = 20;
distances_vec = np.arange(distances_start, distances_stop+1, distances_width)

# distances_to_plot = np.array([2.0, 3.5, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0, 8.0, 9.0, 10.0])
distances_to_plot = np.array([2.0, 3.5, 4.5, 5.0, 5.5, 6.0]) # Use just 6 now for testing purposes
distance_indices = [np.where(distances_vec == distance)[0] for distance in distances_to_plot if np.argwhere(distances_vec == distance).size]
print distance_indices
print

# projects_folder = '/home/fsund/Projects'
project_names = ['flat_square_fracture02/10_05_measuring_every_100th_timestep_200steps', 
                 'rough_fracture01_abel/12_04_measuring_every_100th_timestep_200steps']
# projects = []
# for project_name in project_names:
    # projects.append(os.path.join(projects_folder, project_name))

# Results folder names
results_folder_base = "/home/fsund/Dropbox/Masteroppgave/master/notebooks/tetrahedral_order_parameter"
results_folder_name = "results"
results_folder_numbers = [18, 5]

if False:
    results_folders = []
    for idx, number in enumerate(results_folder_numbers):
        results_folders.append(os.path.join(results_folder, project_names[idx], results_folder_name + "%03d" %number))


## Plot ##
def plot_from_file(ax, filename, num_y_col, label, props = dict()):
    data = np.genfromtxt( # makes np.ndarray
        filename,
        # names = True,     #  If `names` is True, the field names are read from the first valid line
        # comments = '#',   # Skip characters after #
        # delimiter = '\t', # tab separated values
        # dtype = None      # guess the dtype of each column
        skip_header = 1     # skip header
    )
    x = data[:,0]
    y = data[:,num_y_col]

    # plt.plot(x, y, ".-", label = "{\\footnotesize {}}".format(label), prop={'size':'small'});
    # ax = plt.plot(x, y, ".-", label = "{\\footnotesize %s}" %label, prop={'size':'small'});
    # plot, = ax.plot(x, y, ".-", label = "{\\footnotesize %s}" %label, **props)
    plot, = ax.plot(x, y, label = "{\\footnotesize %s}" %label, **props)
    # ax = plt.plot(x, y); # , ".-", kwargs = {"label":"{\\footnotesize %s}" %label}
    return plot
    # ax[0].set_prop(prop)

# def mysavefig(filename):  
#     if renderer == 'AGG':  
#         plt.savefig(filename + ".png", bbox_inches='tight')
        
#     elif renderer == 'SVG':
#         plt.savefig(filename + ".svg", bbox_inches='tight')
        
#     else:
#         print "Error in mysavefig!"

## Plot ? ##
avg_figure_index = len(distances_vec)
fig = plt.figure();

# axes = []
# for i in range(6):
#     axes.append(plt.subplot(3,2,i))

axes = [None]*6
axes[4] = fig.add_subplot(3,2,5) # bottom left
axes[5] = fig.add_subplot(3,2,6, sharey=axes[4]) # bottom right
axes[0] = fig.add_subplot(3,2,1, sharex=axes[4]) # top left
axes[1] = fig.add_subplot(3,2,2, sharex=axes[5], sharey=axes[0]) # top right
axes[2] = fig.add_subplot(3,2,3, sharex=axes[4]) # middle left
axes[3] = fig.add_subplot(3,2,4, sharex=axes[5], sharey=axes[2]) # middle right

plots = []
# for result_idx, results_folder in enumerate(results_folders):
for project_idx, project_name in enumerate(project_names):

    results_folder = os.path.join(results_folder_base, project_name, results_folder_name + "%03d" %results_folder_numbers[project_idx])

    avr_file = os.path.join(results_folder, "avr_TOP_from_dump_nt_%i_Q_%.1f_%.1f_num_bins_%i.txt" %((stop-start)/float(step), Q_start, Q_stop, num_bins))
    hist_file = os.path.join(results_folder, "hist_TOP_from_dump_nt_%i_Q_%.1f_%.1f_num_bins_%i.txt"%((stop-start)/float(step), Q_start, Q_stop, num_bins))

    print "Hist file: \n    \"" + hist_file + "\"\n"
    print "\nAverage file: \n    \"" + avr_file + "\"\n"

    # Plot the histograms, each shell get's its own plot    
    # for fig_idx, distance in enumerate(distances_vec):
    for idx, distance in enumerate(distances_to_plot):

        ax = axes[idx]
        plt.sca(ax)
        plt.hold("on");
        column = np.argwhere(distances_vec == distance)[0]
        plots.append(plot_from_file(ax, hist_file, column, label = "System \\#{:d}".format(project_idx)));

        # plt.title("tetrahedral order parameter(Q) for distance = %g A" %(distance))
        # plt.title("TOP(Q) for \$r = %g\$ \\AA" %(distance))
        plt.title("\$r = %g\$ \\AA" %(distance))
        if idx in [4,5]:
            plt.xlabel("Q")
        if idx == 2:
            plt.ylabel("relative occurrence")
        # hist_legends[fig_idx].append("System \\#%d" %result_idx);

    # # Plot the averages. One plot in total
    # plt.figure(avg_figure_index, figsize = default_fig_size/fig_size_reduction_factor)
    # plt.hold("on");
    # plot_from_file(avr_file, 1, label = "System \\#%d" %result_idx);
    # # plt.title("tetrahedral order parameter(Q) - average")
    # plt.title("TOP(Q) - average")
    # plt.xlabel("\$r\$")
    # plt.ylabel("Q")
    # # legends.append("System \\#%d" %result_idx)


## Legends and saving figures ##
for i in [0,1,2,3]:
    plt.setp(axes[i].get_xticklabels(), visible=False)

for i in [1,3,5]:
    plt.setp(axes[i].get_yticklabels(), visible=False)

import matplotlib.ticker as mticker
# myLocator = mticker.MultipleLocator(2)
myXLocator = mticker.MaxNLocator(4)
myYLocator = mticker.MaxNLocator(3)

# plt.figure(avg_figure_index)
# leg = plt.legend(loc="upper left", prop={'size':'small'})
# frame = leg.get_frame()
# frame.set_visible(False) # remove box completely
# plt.gca().xaxis.set_major_locator(myXLocator)
# plt.gca().yaxis.set_major_locator(myYLocator)

# for fig_idx, distance in enumerate(distances_vec):

# Move and resize the small plots
for ax in [axes[i] for i in [0,2,4]]:
    box = ax.get_position()
    ax.set_position([box.x0, box.y0, (box.x1 - box.x0)*1.05, (box.y1 - box.y0)])

for ax in [axes[i] for i in [1,3,5]]:
    box = ax.get_position()
    ax.set_position([box.x0 - (box.x1-box.x0)*0.1, box.y0, (box.x1 - box.x0)*1.05, (box.y1 - box.y0)])

# Fancy legend outside
plt.draw()

# try 1
# leg = axes[0].legend(["{\\footnotesize System \\#0}", "{\\footnotesize System \\#1}"], bbox_to_anchor = (0.8, 0.05), bbox_transform = fig.transFigure)

# try 2
legs = []
legs.append(axes[0].legend([plots[0]], ["{\\footnotesize System \\#0}"], bbox_to_anchor = (1.0, 0.05), bbox_transform = fig.transFigure))
legs.append(axes[0].legend([plots[6]], ["{\\footnotesize System \\#1}"], bbox_to_anchor = (0.5, 0.05), bbox_transform = fig.transFigure)) # this removes leg[0] from the axis
axes[0].add_artist(legs[0])

# try 3
# plt.sca(axes[0])
# l1 = plt.legend([plots[0]], ["{\\footnotesize System \\#0}"], bbox_to_anchor = (0.8, 0.05), bbox_transform = fig.transFigure);
# l2 = plt.legend([plots[1]], ["{\\footnotesize System \\#1}"], bbox_to_anchor = (0.8, 0.05), bbox_transform = fig.transFigure);

for leg in legs:
    frame = leg.get_frame().set_visible(False) # remove box completely

if True:
    for ax in axes:
        # plt.sca(ax)
        # leg = plt.legend(loc="upper left", prop={'size':'small'})
        # frame = leg.get_frame()
        # frame.set_visible(False) # remove box completely

        # plt.legend(hist_legends[fig_idx], loc = 'lower center');

        # plt.gca().set_ylim([0, 0.025])
        ax.set_ylim([0, 0.02])
        ax.set_xlim([-0.6, 1.1])
        # ax.xaxis.set_major_locator(myXLocator)
        # ax.yaxis.set_major_locator(myYLocator)
        ax.set_xticks([-0.5, 0.0, 0.5, 1.0])

if renderer == default_backend:
    plt.show()

elif renderer == 'SVG':
    fig.savefig("fancyfig.svg", bbox_inches='tight')
