# dlmwrite(sprintf('H_samples_wfbm_HDDMA_nSamples-%d_H0.05-0.1-0.95.txt', nSamples), H_samples, 'delimiter','\t','precision', '%.5f')
# dlmwrite(sprintf('H_samples_fbmwoodchan_HDDMA_nSamples-%d_H0.05-0.1-0.95.txt', nSamples), H_samples, 'delimiter','\t','precision', '%.5f')
# dlmwrite(sprintf('H_samples_fbmlevinson_HDDMA_nSamples-%d_H0.05-0.1-0.95.txt', nSamples), H_samples, 'delimiter','\t','precision', '%.5f')
# dlmwrite(sprintf('H_samples_synth2_HDDMA_nSamples-%d_H0.05-0.1-0.95.txt', nSamples), H_samples, 'delimiter','\t','precision', '%.5f')

import numpy as np

default_backend = "Qt4Agg"
default_fig_size = np.array([8.0, 6.0]) # inches

backend = default_backend
backend = "SVG"

import matplotlib
matplotlib.use(backend)
if backend == "SVG":
    matplotlib.rcParams['svg.fonttype'] = 'none' # To make text in the resulting svg actual text, instead of a path. 
import matplotlib.pyplot as plt

if backend == default_backend:
    plt.ion()

gens = ["wfbm", "fbmwoodchan", "fbmlevinson", "synth2"]
nSamples = [1000, 1000, 1000, 100]
input_H = np.arange(0.05, 1.0, 0.1)

from matplotlib.gridspec import GridSpec
gs = GridSpec(1,3)
gs.update(wspace=0.05, hspace=0.0) # remove spacing

fig = plt.figure(figsize = np.array([12.0, 3.75])/1.4);

axes = []
axes.append(fig.add_subplot(gs[0, 0]))
axes.append(fig.add_subplot(gs[0, 1], sharex = axes[0], sharey = axes[0]))
axes.append(fig.add_subplot(gs[0, 2], sharex = axes[0], sharey = axes[0]))

theta_vec = [0.0, 0.5, 0.99999]

for theta_idx, theta in enumerate(theta_vec):
    
    ax = axes[theta_idx]
    # ax.plot(input_H, input_H, '--', label = r"{\f true \$H\$}")
    ax.plot(input_H, input_H, '--', label = "\\thislabelaaaaaa")
    # ax.plot(input_H, input_H, '--', label = r"{\f true H}")

    for idx, gen in enumerate(gens):
        fileName = "H_samples_{}_HDDMA_nSamples-{:d}_theta-{:.2f}_H0.05-0.1-0.95.txt".format(gen, nSamples[idx], theta)
        
        data = np.genfromtxt( # makes np.ndarray
            fileName,
            delimiter = '\t', # tab separated values
        )

        ax.plot(input_H, np.mean(data,0), 
            label = "{{\\f {}}}".format(gen),
            # linestyle = linestyle,
            # marker = marker
        )

    # ax.legend(loc = "best")
    # ax.set_xlabel("input H")
    # ax.set_ylabel("measured H")
    # ax.set_title("HDDMA")

# limits = [0.0, 1.0]
limits = [0.05, 0.95]
ticks = [0.2, 0.4, 0.6, 0.8]

axes[0].set_xlim(limits)
axes[0].set_xticks(ticks)

axes[0].set_ylim(limits)
axes[0].set_yticks(ticks)

axes[0].set_ylabel("Measured \$H\$")
axes[1].set_xlabel("Input \$H\$")
# axes[0].set_ylabel("Measured H")
# axes[1].set_xlabel("Input H")
# fig.text(s = "Input H", x=0.5, y=0.0, transform = fig.transFigure, ha = "center", va = "center")
plt.suptitle("HDDMA")

# Add one legend below the subfigures
leg = axes[0].legend(
        bbox_to_anchor = (0.91, -0.1), 
        # bbox_to_anchor = (0.89, 0.1), 
        bbox_transform = fig.transFigure, 
        borderaxespad = 0, 
        ncol = 5, 
        fancybox = True,
        fontsize = "small",
        columnspacing = 0.0)

# Add text to subplots
for idx, ax in enumerate(axes):
    ax.text(.05, .88,
        "\$\\theta = %.1f\$" %(theta_vec[idx]),
        horizontalalignment = 'left',
        transform = ax.transAxes)

# Make some yticklabels invisible
for ax in (axes[i] for i in [1,2]):
    plt.setp(ax.get_yticklabels(), visible=False)

if backend == default_backend:
    plt.show()
else:
    fig.savefig("fig03.svg", bbox_inches='tight')