default_backend = "Qt4Agg"

backend = default_backend
# backend = "SVG"

import matplotlib
matplotlib.use(backend)
import matplotlib.pyplot as plt
if default_backend == default_backend:
    plt.ion()

import numpy as np

input_H = np.arange(0.0, 1.2+0.05, 0.1)
nSamples = 100

fig = plt.figure()
fig.hold('on')
ax = fig.add_subplot(1,1,1)

ax.plot(input_H, input_H, label = 'input H')
for addition in [0,1]:
    for pbc in [0,1]:
        filename = "randseed_H_samples_diamondSquare_HDDMA_addition-{:d}_pbc-{:d}_nSamples-{:d}_H0.0-0.1-1.2.txt".format(addition, pbc, nSamples)
        data = np.genfromtxt( # makes np.ndarray
            filename,
            # names = True, #  If `names` is True, the field names are read from the first valid line
            # comments = '#', # Skip characters after #
            delimiter = '\t', # tab separated values
            # dtype = None # guess the dtype of each column
        )

        if (addition):
            linestyle = '--'
        else:
            linestyle = '-'
        if (pbc):
            marker = 'o'
        else:
            marker = 'None'

        ax.plot(input_H, np.mean(data,0), 
            label = "addition = {}, pbc = {}".format(addition, pbc),
            linestyle = linestyle,
            marker = marker)

        # print np.shape(data)
        # print np.shape(np.mean(data,0))

wanted_H = 0.75
ax.plot([input_H[0], input_H[-1]], [wanted_H, wanted_H], 
    label = "Wanted H")

ax.set_xlabel('input H')
ax.set_ylabel('mean result H')
ax.legend(loc = 'best')

if backend == default_backend:
    plt.show()
else:
    fig.savefig("fig.svg", bbox_inches='tight')

