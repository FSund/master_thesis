import numpy as np

default_backend = "Qt4Agg"
default_fig_size = np.array([8.0, 6.0]) # inches

backend = default_backend
# backend = "SVG"

import matplotlib
matplotlib.use(backend)
if backend == "SVG":
    matplotlib.rcParams['svg.fonttype'] = 'none' # To make text in the resulting svg actual text, instead of a path. 

import matplotlib.pyplot as plt
if default_backend == default_backend:
    plt.ion()

def make_font_small(text):
    text = "{\\f " + text + "}"
    return text

input_H = np.arange(0.0, 1.2+0.05, 0.1)
nSamples = 100

fig = plt.figure(figsize = default_fig_size/1.4)
# fig.hold('on')

ax = fig.add_subplot(1,1,1)

wanted_H = 0.75
ax.plot([input_H[0], input_H[-1]], [wanted_H, wanted_H], 
    '--', label = make_font_small("\$H = 0.75\$"), color = '0.5')
ax.plot(input_H, input_H, '-', label = "\\hh", color = '0.5')

for addition in [0,1]:
    for pbc in [0,1]:
        filename = "randseed_H_samples_diamondSquare_HDDMA_addition-{:d}_pbc-{:d}_nSamples-{:d}_H0.0-0.1-1.2.txt".format(addition, pbc, nSamples)
        data = np.genfromtxt( # makes np.ndarray
            filename,
            # names = True, #  If `names` is True, the field names are read from the first valid line
            # comments = '#', # Skip characters after #
            delimiter = '\t', # tab separated values
            # dtype = None # guess the dtype of each column
        )

        label = ""
        if addition:
            linestyle = '--'
            label += "SRA"
        else:
            linestyle = '-'
            label += "MDM"
        if pbc:
            color = 'g'
            label += ", PBC"
        else:
            color = 'r'

        label = make_font_small(label)

        ax.plot(input_H, np.mean(data,0), 
            label = label,
            linestyle = linestyle,
            color = color)

        # print np.shape(data)
        # print np.shape(np.mean(data,0))

ax.set_xlabel('Input \$H\$')
ax.set_ylabel('Measured \$H\$')
ax.set_title("Successive random additions")
# leg = ax.legend(loc = 'best', 
#     framealpha = 0.0, 
#     bbox_to_anchor = (1.0, 0.45), 
#     bbox_transform = ax.transAxes,
#     fontsize = "small", # to make .svg a bit smaller when saving
#     labelspacing = 0.8, # since we use normal font size in pdf, we need more room when using small fontsize when plottin...
#     borderpad = 0.0     # reduce size of .svg
# )

leg = ax.legend(
    # loc = 'best', 
    framealpha = 0.0, 
    bbox_to_anchor = (0.95, 0.45), 
    bbox_transform = ax.transAxes,
    fontsize = "xx-small", # to make .svg a bit smaller when saving
    labelspacing = 1.5, # since we use normal font size in pdf, we need more room when using small fontsize when plottin...
    borderpad = 0.0,    # reduce size of .svg
    handlelength = 5.0
)
# bb = leg.legendPatch.get_bbox().inverse_transformed(ax.transAxes)

ax.set_xlim([0.0, 1.2])
ax.set_ylim([0.15, 0.95])
# plt.draw()
# plt.show()
# plt.draw()
# plt.show()

# from matplotlib.ticker import MultipleLocator

# majorLocator = MultipleLocator(0.2)
# majorLocator.tick_values(-0.2, 1.4)
# majorLocator.view_limits(-0.2, 1.4)
# ax.xaxis.set_major_locator(majorLocator)
# ax.yaxis.set_major_locator(majorLocator)

# minorLocator = MultipleLocator(0.1)
# ax.xaxis.set_minor_locator(minorLocator)
# ax.yaxis.set_minor_locator(minorLocator)

from matplotlib.ticker import AutoMinorLocator
minorLocator = AutoMinorLocator(n=2)
minorLocator.view_limits(-0.1, 1.4)
ax.xaxis.set_minor_locator(minorLocator)

ax.xaxis.grid(True)
ax.yaxis.grid(True)
ax.xaxis.grid(True, which='minor')
# ax.yaxis.grid(True, which='minor')

return

if True:
    ## Make custom legend frame
    import matplotlib.transforms as mtransforms
    bb = mtransforms.Bbox([[0.63, 0.04], [0.98, 0.47]])

    from matplotlib.patches import FancyBboxPatch
    p_bbox = FancyBboxPatch(
        (bb.x0, bb.y0),
        abs(bb.width), abs(bb.height),
        transform = ax.transAxes, # default ?
        boxstyle = "square,pad=0",
        ec="k", fc="w",
        zorder = 1000
    )
    ax.add_patch(p_bbox)

    # Box above legend
    leg.set_zorder(1001)

if backend == default_backend:
    plt.show()
else:
    fig.savefig("fig02.svg", 
        bbox_inches='tight', 
        # bbox_inches = [8.0, 6.0]
    )

