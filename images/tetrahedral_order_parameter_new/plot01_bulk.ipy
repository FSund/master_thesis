import os.path
import sys            # sys.exit()
import numpy as np

default_backend = 'Qt4Agg'
default_fig_size = np.array([8.0, 6.0]) # inches

backend = default_backend
backend = 'SVG'

import matplotlib
matplotlib.use(backend)
matplotlib.rcParams['svg.fonttype'] = 'none' # To make text in the resulting svg actual text, instead of a path. 
matplotlib.rcParams['savefig.dpi'] = 150 # Doesn't apply when using svg backend?

import matplotlib.pyplot as plt

if backend == default_backend:
    plt.ion()

## Settings/load
mts0_start = 0
mts0_step = 1
mts0_steps = 200

Q_start = -0.5
Q_stop = 1
num_bins = 150

bulk_distance = 10.0

results_folder = "/home/fsund/Dropbox/Masteroppgave/master/analysis/tetrahedral_order_parameter/bulk_results"
systems = [ \
    "flat_square_fracture02/10_05_measuring_every_100th_timestep_200steps/010",
    "flat_square_fracture03/10_01_measuring_every_100th_timestep/004"
]
results_folders = [os.path.join(results_folder, system) for system in systems]
n_systems = len(systems)

# Legends
# legends = ["rough01", "rough03", "rough04", "rough05", "flat02", "flat03", "flatsq02", "flatsq03"]
legends = ["Bulk, flat \#1", "Bulk, flat \#2"]
linestyles = ["-", "-", "--", "--"]

def load_bulk_results(results_folder, bulk_distance):

    bins = []
    histograms = []

    filename = os.path.join(results_folder, "histogram_r%.2f-inf.txt" %(bulk_distance))

    if os.path.isfile(filename):
        data = np.genfromtxt(filename, skip_header = 1) # First row is header
        bins.append(data[0, 1:]) # First row of data contains header and bins
        histograms.append(data[1:, 1:]) # The rest of the rows are mts0-filenames (data[:,0]) and histograms

        # if i==0:
        #     print "Data from \"" + filename + "\""
        #     print bins[0]
        #     print histograms[0][0,:]

    else:
        print "! Error, file \"" + filename + "\" not found !"
        sys.exit(1)

    return bins, histograms

## Create figure and axes
fig = plt.figure(figsize = default_fig_size/1.4)

axes = []
axes.append(fig.add_subplot(111))

# Add vertical dotted line (one single "grid line")
for ax in axes:
    ax.axvline(0.5, linestyle=':', color='0.25',
        dash_capstyle = 'round',
        linewidth = 0.5,
    )

## Loop over systems
for system in range(n_systems):

    result_folder = results_folders[system]

    ## Load data
    bins, histograms = load_bulk_results(result_folder, bulk_distance)
    print "histograms[0].shape = " + str(histograms[-1].shape)

    ## Plot
    if system == 0:
        lines = []

    idx = 0
    histogram = np.mean(histograms[idx], 0)

    line, = axes[idx].plot(bins[idx], histogram,
        linestyle = linestyles[system],
    )
    lines.append(line)


## Set up axes and ticks
# Limits
ax = axes[0] # all axes share x- and y-axes with axes[0]
ax.set_ylim([-0.002, 0.022])
ax.set_xlim([-0.6, 1.1])

# Ticks
from matplotlib.ticker import MultipleLocator

majorLocator = MultipleLocator(0.5)
minorLocator = MultipleLocator(0.25)
ax.xaxis.set_major_locator(majorLocator)
ax.xaxis.set_minor_locator(minorLocator)

majorLocator = MultipleLocator(0.005)
minorLocator = MultipleLocator(0.0025)
ax.yaxis.set_major_locator(majorLocator)
ax.yaxis.set_minor_locator(minorLocator)

# Add subplot titles manually, inside plots
idx = 0
ax = axes[idx]
ax.text(.05, .88,
    "\$r = %.1f\$ \\AA" %(bulk_distance),
    horizontalalignment = 'left',
    transform = ax.transAxes
)

# Title
ax.set_title("Tetrahedral order parameter")

# Axis labels
ax.set_xlabel("Q \\hl{unit?}")
ax.set_ylabel("Relative occurrence")

# Legends
# leg = ax.legend(fancy_legtexts, bbox_to_anchor = (0.79, 0.04), bbox_transform = fig.transFigure, borderaxespad = 0, ncol = 2, fancybox = True)
leg = axes[0].legend(lines, legends, 
        loc = "center left", # actually decides where the "origin" of bbox below is
        # bbox_to_anchor = (0.5, 0.05), bbox_transform = fig.transFigure, 
        # borderaxespad = 0, ncol = 1, 
        fancybox = True,
        columnspacing = 0.0, handletextpad = 0.2,
    )

if backend == default_backend:
    plt.show()
else:
    fig.savefig("figure01_bulk.svg", bbox_inches = "tight")
