import os.path
import sys            # sys.exit()
import numpy as np

default_backend = 'Qt4Agg'
default_fig_size = np.array([8.0, 6.0]) # inches

backend = default_backend
backend = 'SVG'

import matplotlib
matplotlib.use(backend)
matplotlib.rcParams['svg.fonttype'] = 'none' # To make text in the resulting svg actual text, instead of a path. 
matplotlib.rcParams['savefig.dpi'] = 150 # Doesn't apply when using svg backend?

import matplotlib.pyplot as plt

if backend == default_backend:
    plt.ion()

## Settings/load
mts0_start = 0
mts0_step = 1
mts0_steps = 200

Q_start = -0.5
Q_stop = 1
num_bins = 150

r_start = 0.0
r_step = 0.5
r_steps = 20
r_vector = np.arange(r_start, r_start + r_step*(r_steps+1), r_step)
print "r_vector = " + str(r_vector)

calculate_bulk = True
bulk_distance = 10.0
# distances_vec = np.arange(distances_start, distances_stop+1, distances_width)

# distances_to_plot = np.array([2.0, 3.5, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0, 8.0, 9.0, 10.0, 10.5])
# distances_to_plot = np.array([3.0, 3.5, 4.0, 4.5])
distances_to_plot = np.array([3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0, 8.5]) # 9.5 not available for flat_fracture02


r_indices_to_plot = []
for distance in distances_to_plot:
    if np.any(r_vector[:-1] == distance):
        r_indices_to_plot.append(
            np.where(
                r_vector[:-1] == distance # skip last element of r_vector, since this is end of range
            )[0][0] # assume distances_to_plot and r_vector unique, so we just take the first element
        )
n_plots = len(r_indices_to_plot)

if n_plots != len(distances_to_plot):
    print "Skipped some distances_to_plot, since they couldn't be found in r_vector"

if n_plots%2 != 0:
    print "! Error, distances_to_plot should be set so the number of plots are divisible by 2"
    sys.exit(1)

print "n_plots = " + str(n_plots)
print "r_indices_to_plot = " + str(r_indices_to_plot)

results_folder = "/home/fsund/Dropbox/Masteroppgave/master/analysis/tetrahedral_order_parameter/results"
systems = [ \
    "rough_fracture01_abel/12_04_measuring_every_100th_timestep_200steps/000",
    "rough_fracture03/10_01_measuring_every_100th_timestep_200steps/000",
    # "rough_fracture04_same_distance/10_01_measuring_every_100th_timestep_200steps/000",
    # "rough_fracture05/10_01_measuring_every_100th_timestep_200steps/000",
    # "flat_fracture02/10_01_measuring_every_100th_timestep/000",
    # "flat_fracture03/10_01_measuring_every_100th_timestep/000",
    "flat_square_fracture02/10_05_measuring_every_100th_timestep_200steps/000",
    "flat_square_fracture03/10_01_measuring_every_100th_timestep/000",
]
results_folders = [os.path.join(results_folder, system) for system in systems]
n_systems = len(systems)

# Legends
# legends = ["rough01", "rough03", "rough04", "rough05", "flat02", "flat03", "flatsq02", "flatsq03"]
legends = ["Rough \#1", "Rough \#2", "Flat \#3", "Flat \#4"]
linestyles = ["-", "-", "--", "--"]

def load_results(results_folder, r_vector, r_indices_to_plot):

    # bins = [None]*n_plots
    # histograms = [None]*n_plots
    bins = []
    histograms = []

    # Using known r's
    for i in r_indices_to_plot:
        r0 = r_vector[i]
        r1 = r_vector[i+1]
        filename = os.path.join(results_folder, "histogram_r%.2f-%.2f.txt" %(r0, r1))

        if os.path.isfile(filename):
            data = np.genfromtxt(filename, skip_header = 1) # First row is header
            bins.append(data[0, 1:]) # First row of data contains header and bins
            histograms.append(data[1:, 1:]) # The rest of the rows are mts0-filenames (data[:,0]) and histograms

            # if i==0:
            #     print "Data from \"" + filename + "\""
            #     print bins[0]
            #     print histograms[0][0,:]

        else:
            print "! Error, file \"" + filename + "\" not found !"
            sys.exit(1)

    return bins, histograms

## Create figure and axes
fig = plt.figure(figsize = default_fig_size*[1.0, 2])

n_cols = 2
n_rows = n_plots/n_cols
from matplotlib.gridspec import GridSpec
gs = GridSpec(n_rows, n_cols)
gs.update(wspace=0.03, hspace=0.05) # reduce spacing

print "n_cols = " + str(n_cols)
print "n_rows = " + str(n_rows)

axes = []
axes.append(fig.add_subplot(gs[0,0]))
for i in range(n_rows):
    for j in range(n_cols):
        if (i is not 0 or j is not 0):
            axes.append(fig.add_subplot(gs[i,j], sharex = axes[0], sharey = axes[0]))

# Add vertical dotted line (one single "grid line")
for ax in axes:
    ax.axvline(0.5, linestyle=':', color='0.25',
        dash_capstyle = 'round',
        linewidth = 0.5,
    )

## Loop over systems
for system in range(n_systems):

    result_folder = results_folders[system]

    ## Load data
    bins, histograms = load_results(result_folder, r_vector, r_indices_to_plot)
    print "histograms[0].shape = " + str(histograms[-1].shape)

    ## Plot
    if system == 0:
        lines = []
    for idx in range(n_plots):
        histogram = np.mean(histograms[idx], 0)

        line, = axes[idx].plot(bins[idx], histogram,
            linestyle = linestyles[system],
        )
        if idx == 0:
            lines.append(line)


## Set up axes and ticks
# Limits
ax = axes[0] # all axes share x- and y-axes with axes[0]
ax.set_ylim([-0.002, 0.022])
ax.set_xlim([-0.6, 1.1])

# Ticks
from matplotlib.ticker import MultipleLocator

majorLocator = MultipleLocator(0.5)
minorLocator = MultipleLocator(0.25)
ax.xaxis.set_major_locator(majorLocator)
ax.xaxis.set_minor_locator(minorLocator)

majorLocator = MultipleLocator(0.005)
minorLocator = MultipleLocator(0.0025)
ax.yaxis.set_major_locator(majorLocator)
ax.yaxis.set_minor_locator(minorLocator)

# ax.set_xticks([-0.5, 0.0, 0.5, 1.0])
# ax.set_yticks([0.0, 0.005, 0.01, 0.015, 0.02])

# Ticklabels
# Make ticklabels for some plots invisible
for idx in range(n_plots):
    i = idx/n_cols
    j = idx%n_cols

    # Remove x-axes
    if i < (n_rows-1):
        plt.setp(axes[idx].get_xticklabels(), visible=False)

    # Remove y-axes
    if j > 0:
        plt.setp(axes[idx].get_yticklabels(), visible=False)

# Add subplot titles manually, inside plots
for idx in range(n_plots):
    ax = axes[idx]
    ax.text(.05, .88,
        "\$r = %.1f\$ \\AA" %(distances_to_plot[idx]),
        horizontalalignment = 'left',
        transform = ax.transAxes
    )

# Title
plt.suptitle("Tetrahedral order parameter for regular fractures", x = 0.5, y = 0.92)

# Axis labels
fig.text(s = "Q \\hl{unit?}", x=0.5, y=0.07, transform = fig.transFigure, ha = "center", va = "center")
fig.text(s = "Relative occurrence", x=0.04, y=0.5, rotation = "vertical", transform = fig.transFigure, ha = "center", va = "center")

## TODO: Add legends (one for each system/color)

# Legends
# leg = ax.legend(fancy_legtexts, bbox_to_anchor = (0.79, 0.04), bbox_transform = fig.transFigure, borderaxespad = 0, ncol = 2, fancybox = True)
leg = axes[0].legend(lines, legends, 
    loc = "upper center", # actually decides where the "origin" of bbox below is
    bbox_to_anchor = (0.5, 0.05), bbox_transform = fig.transFigure, borderaxespad = 0, 
    ncol = 4, fancybox = True,
    columnspacing = 0.0, handletextpad = 0.2)

if backend == default_backend:
    plt.show()
else:
    fig.savefig("figure01_normal_fractures.svg", bbox_inches = "tight")
