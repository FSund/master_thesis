import os.path
import sys            # sys.exit()
import numpy as np

colors = ['b', 'g', 'r', 'c', 'm', 'y', 'k']

default_backend = 'Qt4Agg'
default_fig_size = np.array([8.0, 6.0]) # inches

backend = default_backend
backend = 'SVG'

import matplotlib
matplotlib.use(backend)
matplotlib.rcParams['svg.fonttype'] = 'none' # To make text in the resulting svg actual text, instead of a path. 
matplotlib.rcParams['savefig.dpi'] = 150 # Doesn't apply when using svg backend?

import matplotlib.pyplot as plt

if backend == default_backend:
    plt.ion()


yaxis_factor = 100.0

for select in [5,6,7,8]:

    linestyles = ["-", "-", "-", "-", "-", "-", "-", "-"]
    # distances_to_plot = np.array([3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0, 8.5]) # 9.5 not available for flat_fracture02
    distances_to_plot = np.array([3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6.0, 6.5]) # 9.5 not available for flat_fracture02
    fig_size_factor = np.array([1.0, 1.6])
    n_legend_cols = 4
    # z_order = np.array([7,6,5,4,3,2,1,0]) # higher number -> closer to top/screen
    z_order = np.array([8,7,6,5,4,3,2,1]) # higher number -> closer to top/screen
    legends = ["Rough \#1", "Rough \#2", "Rough \#3", "Rough \#4", "Ref. \#1", "Ref. \#2", "Ref. \#3", "Ref. \#4"]
    # x_label_y_pos = 0.07
    x_label_y_pos = 0.06
    # title_y_pos = 0.935
    title_y_pos = 0.94
    # legend_y_pos = 0.05
    legend_y_pos = 0.04

    average_vertical_line = False

    if select == 1:
        systems_to_plot = [0,1,4]
        suptitle = "Tetrahedral order parameter for\n two rough fractures, and a reference system"
        filename = "figure02_regular_and_wide.svg"
        linestyles[4] = "--"

    elif select == 2:
        systems_to_plot = [2,4,6]
        suptitle = "Tetrahedral order parameter for a fracture of uniform width (14.4 \\AA),\n and two reference systems"
        filename = "figure02_flat_and_wide01.svg"
        linestyles[4] = "--"

    elif select == 3:
        systems_to_plot = [3,4,7]
        suptitle = "Tetrahedral order parameter for a fracture of uniform width (28.8 \\AA),\n and two reference systems"
        filename = "figure02_flat_and_wide02.svg"
        linestyles[4] = "--"

    elif select == 4:
        systems_to_plot = [0,1,2,3,4]
        suptitle = "Tetrahedral order parameter for all rough fractures \n and one reference system"
        filename = "figure02_all_rough_and_reference.svg"
        linestyles[4] = "--"
        # distances_to_plot = np.array([3.0, 3.5, 4.0, 4.5, 5.0, 5.5]) # 9.5 not available for flat_fracture02
        # fig_size_factor = np.array([1.0, 1.8/2.0])
        n_legend_cols = 3
        # x_label_y_pos = 0.03
        # title_y_pos = 0.97
        # legend_y_pos = 0.0

    elif select == 5:
        systems_to_plot = [4,5,6,7]
        suptitle = "Tetrahedral order parameter for all reference systems"
        filename = "figure02_all_references.svg"
        linestyles[6] = "--"
        linestyles[7] = "--"
        title_y_pos = 0.92

    elif select == 6:
        systems_to_plot = [0,1,2,3]
        suptitle = "Tetrahedral order parameter for all rough fracture systems"
        filename = "figure02_all_rough.svg"
        linestyles[2] = "--"
        linestyles[3] = "--"
        title_y_pos = 0.92

    elif select == 7:
        systems_to_plot = [0,1,4,5,6,7]
        suptitle = "Tetrahedral order parameter for two random rough fractures\n and all reference systems"
        filename = "figure02_normal_and_reference.svg"
        linestyles[4:8] = ["--", "--", "--", "--"]
        # title_y_pos = 0.92
        n_legend_cols = 3

    elif select == 8:
        systems_to_plot = [2,3,4,5,6,7]
        suptitle = "Tetrahedral order parameter for two uniform width random fractures\n and all reference systems"
        filename = "figure02_narrow_and_reference.svg"
        linestyles[4:8] = ["--", "--", "--", "--"]
        # title_y_pos = 0.92
        n_legend_cols = 3


    ## Settings/load
    mts0_start = 0
    mts0_step = 1
    mts0_steps = 200

    Q_start = -0.5
    Q_stop = 1
    num_bins = 150

    r_start = 0.0
    r_step = 0.5
    r_steps = 20
    r_vector = np.arange(r_start, r_start + r_step*(r_steps+1), r_step)
    print "r_vector = " + str(r_vector)

    calculate_bulk = True
    bulk_distance = 10.0
    # distances_vec = np.arange(distances_start, distances_stop+1, distances_width)

    # distances_to_plot = np.array([2.0, 3.5, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0, 8.0, 9.0, 10.0, 10.5])
    # distances_to_plot = np.array([3.0, 3.5, 4.0, 4.5])
    # distances_to_plot = np.array([3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0, 8.5]) # 9.5 not available for flat_fracture02


    r_indices_to_plot = []
    for distance in distances_to_plot:
        if np.any(r_vector[:-1] == distance):
            r_indices_to_plot.append(
                np.where(
                    r_vector[:-1] == distance # skip last element of r_vector, since this is end of range
                )[0][0] # assume distances_to_plot and r_vector unique, so we just take the first element
            )
    n_plots = len(r_indices_to_plot)

    if n_plots != len(distances_to_plot):
        print "Skipped some distances_to_plot, since they couldn't be found in r_vector"

    if n_plots%2 != 0:
        print "! Error, distances_to_plot should be set so the number of plots are divisible by 2"
        sys.exit(1)

    print "n_plots = " + str(n_plots)
    print "r_indices_to_plot = " + str(r_indices_to_plot)

    results_folder = "/home/fsund/Dropbox/Masteroppgave/master/analysis/tetrahedral_order_parameter/results"
    systems = [ \
        "rough_fracture01_abel/12_04_measuring_every_100th_timestep_200steps/000",          # 0
        "rough_fracture03/10_01_measuring_every_100th_timestep_200steps/000",               # 1
        "rough_fracture04_same_distance/10_01_measuring_every_100th_timestep_200steps/000", # 2
        "rough_fracture05/10_01_measuring_every_100th_timestep_200steps/000",               # 3
        "flat_square_fracture02/10_05_measuring_every_100th_timestep_200steps/000",         # 4
        "flat_square_fracture03/10_01_measuring_every_100th_timestep/000",                  # 5
        "flat_fracture02/10_01_measuring_every_100th_timestep/000",                         # 6
        "flat_fracture03/10_01_measuring_every_100th_timestep/000",                         # 7
    ]
    results_folders = [os.path.join(results_folder, system) for system in systems]
    # n_systems = len(systems_to_plot)

    # Legends
    # legends = ["rough01", "rough03", "rough04", "rough05", "flat02", "flat03", "flatsq02", "flatsq03"]
    # legends = ["Rough \#1", "Rough \#2", "Rough \#3", "Rough \#4", "Flat \#1", "Flat \#2", "Flat \#3", "Flat \#4"]
    # legends = ["Rough \#1", "Rough \#2", "Rough \#3", "Rough \#4", "Ref. \#1", "Ref. \#2", "Ref. \#3", "Ref. \#4"]
    # linestyles = ["-", "-", "-", "-", "--", "--", "--", "--"]
    # z_order = np.array([7,6,5,4,3,2,1,0]) # higher number -> closer to top/screen

    def load_results(results_folder, r_vector, r_indices_to_plot):

        # bins = [None]*n_plots
        # histograms = [None]*n_plots
        bins = []
        histograms = []

        # Using known r's
        for i in r_indices_to_plot:
            r0 = r_vector[i]
            r1 = r_vector[i+1]
            filename = os.path.join(results_folder, "histogram_r%.2f-%.2f.txt" %(r0, r1))

            if os.path.isfile(filename):
                data = np.genfromtxt(filename, skip_header = 1) # First row is header
                bins.append(data[0, 1:]) # First row of data contains header and bins
                histograms.append(data[1:, 1:]) # The rest of the rows are mts0-filenames (data[:,0]) and histograms

                # if i==0:
                #     print "Data from \"" + filename + "\""
                #     print bins[0]
                #     print histograms[0][0,:]

            else:
                print "! Error, file \"" + filename + "\" not found !"
                sys.exit(1)

        return bins, histograms

    ## Create figure and axes
    # fig = plt.figure(figsize = default_fig_size*[1.0, 2])
    fig = plt.figure(figsize = default_fig_size*fig_size_factor)

    n_cols = 2
    n_rows = n_plots/n_cols
    from matplotlib.gridspec import GridSpec
    gs = GridSpec(n_rows, n_cols)
    gs.update(wspace=0.03, hspace=0.05) # reduce spacing

    print "n_cols = " + str(n_cols)
    print "n_rows = " + str(n_rows)

    axes = []
    axes.append(fig.add_subplot(gs[0,0]))
    for i in range(n_rows):
        for j in range(n_cols):
            if (i is not 0 or j is not 0):
                axes.append(fig.add_subplot(gs[i,j], sharex = axes[0], sharey = axes[0]))

    # # Add vertical dotted line (one single "grid line")
    # for ax in axes:
    #     ax.axvline(0.5, linestyle=':', color='0.25',
    #         dash_capstyle = 'round',
    #         linewidth = 0.5,
    #     )

    # Save average Q value for each plot and each line
    average_q = np.zeros([len(systems_to_plot), n_plots])

    ## Loop over systems
    for system_idx, system in enumerate(systems_to_plot):

        result_folder = results_folders[system]

        ## Load data
        bins, histograms = load_results(result_folder, r_vector, r_indices_to_plot)
        print "histograms[0].shape = " + str(histograms[-1].shape)

        ## Plot
        if system == systems_to_plot[0]:
            lines = []
        for idx in range(n_plots):
            histogram = np.mean(histograms[idx], 0)

            line, = axes[idx].plot(
                bins[idx], histogram*yaxis_factor,
                linestyle = linestyles[system],
                zorder = z_order[system],
                # linewidth = 2.0,
            )
            if linestyles[system] == "--":
                line.set_dashes((3,2)) # or whatever on/off sequence in points you want 

            # calculate mean Q
            # sum_of_prod = np.sum(bins[idx]*histogram)
            # print "r = " + str(distances_to_plot[idx]) + ", average = " + str(sum_of_prod)
            average_q[system_idx][idx] = np.sum(bins[idx]*histogram)

            if idx == 0:
                lines.append(line)


    # Add vertical dotted line where average q is
    if average_vertical_line:
        for system_idx, system in enumerate(systems_to_plot):
            for ax_idx, ax in enumerate(axes):
                ax.axvline(\
                    average_q[system_idx][ax_idx], 
                    linestyle = '-', 
                    color = colors[system_idx],
                    zorder = 0,
                    alpha = 0.5,
                    # dash_capstyle = 'round',
                    linewidth = 0.75,
                )
    # print average_q

    ## Set up axes and ticks
    # Limits
    ax = axes[0] # all axes share x- and y-axes with axes[0]
    # ax.set_ylim(np.array([-0.002, 0.022])*yaxis_factor)
    ax.set_ylim(np.array([-0.0005, 0.022])*yaxis_factor)
    # ax.set_xlim([-0.6, 1.1])
    ax.set_xlim([-0.25, 1.0])

    # Ticks
    from matplotlib.ticker import MultipleLocator

    majorLocator = MultipleLocator(0.5)
    minorLocator = MultipleLocator(0.25)
    ax.xaxis.set_major_locator(majorLocator)
    ax.xaxis.set_minor_locator(minorLocator)

    majorLocator = MultipleLocator(0.005*yaxis_factor)
    minorLocator = MultipleLocator(0.0025*yaxis_factor)
    ax.yaxis.set_major_locator(majorLocator)
    ax.yaxis.set_minor_locator(minorLocator)

    # ax.set_xticks([-0.5, 0.0, 0.5, 1.0])
    # ax.set_yticks([0.0, 0.005, 0.01, 0.015, 0.02])

    # Ticklabels
    # Make ticklabels for some plots invisible
    for idx in range(n_plots):
        i = idx/n_cols
        j = idx%n_cols

        # Remove x-axes
        if i < (n_rows-1):
            plt.setp(axes[idx].get_xticklabels(), visible=False)

        # Remove y-axes
        if j > 0:
            plt.setp(axes[idx].get_yticklabels(), visible=False)


    # Add subplot titles manually, inside plots
    for idx in range(n_plots):
        ax = axes[idx]
        ax.text(.05, .85,
            "\$r = %.1f\$ \\AA" %(distances_to_plot[idx]),
            horizontalalignment = 'left',
            transform = ax.transAxes
        )

    # Title
    # plt.suptitle(suptitle, x = 0.5, y = 0.92) # single line
    plt.suptitle(suptitle, x = 0.5, y = title_y_pos) # two lines (with line break \n)

    # Axis labels
    fig.text(s = "Tetrahedral order parameter Q", 
        x=0.5, y=x_label_y_pos, transform = fig.transFigure, ha = "center", va = "center")
    # fig.text(s = "Relative occurrence P(Q) [\%]", x=0.04, y=0.5, rotation = "vertical", transform = fig.transFigure, ha = "center", va = "center")
    # for percentage:
    fig.text(s = "Relative occurrence P(Q) [\%]", x=0.065, y=0.5, rotation = "vertical", transform = fig.transFigure, ha = "center", va = "center")

    ## TODO: Add legends (one for each system/color)

    # Legends
    # leg = ax.legend(fancy_legtexts, bbox_to_anchor = (0.79, 0.04), bbox_transform = fig.transFigure, borderaxespad = 0, ncol = 2, fancybox = True)
    leg = axes[0].legend(lines, [legends[i] for i in systems_to_plot],
        loc = "upper center", # actually decides where the "origin" of bbox below is
        bbox_to_anchor = (0.5, legend_y_pos), bbox_transform = fig.transFigure, borderaxespad = 0, 
        ncol = n_legend_cols, 
        fancybox = True,
        columnspacing = 0.0, handletextpad = 0.2,
        fontsize = 13,
    )

    if backend == default_backend:
        plt.show()
    else:
        fig.savefig(filename, bbox_inches = "tight")
