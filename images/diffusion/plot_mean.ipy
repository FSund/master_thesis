import numpy as np
import math
import os.path

default_backend = 'Qt4Agg'

backend = 'SVG'
# backend = default_backend

import matplotlib
matplotlib.use(backend)
matplotlib.rcParams['svg.fonttype'] = 'none' # To make text in the resulting svg actual text, instead of a path. 
matplotlib.rcParams['savefig.dpi'] = 150

import matplotlib.pyplot as plt
if backend == default_backend:
    plt.ion()

def load_results(results_file, r_start, r_step, n_steps, n_timesteps_between_statefiles = 100):
    dt = 20.67 # atomic unit of time
    atomic_unit_of_time = 2.418884326505e-17 # seconds
    timestep = dt*atomic_unit_of_time
    time_between_statefiles = timestep*n_timesteps_between_statefiles/(1.0e-12) # picoseconds
    
    results = np.genfromtxt( # makes np.ndarray
        results_file,
        # names = True, #  If `names` is True, the field names are read from the first valid line
        comments = '#', # Skip characters after #
        # delimiter = '\t', # tab separated values
        # dtype = None # guess the dtype of each column
    )
    results = results[1:-1] # Skip first line, since t and msd = 0 (divide by 6t goes bad)
    
    r_vector = np.arange(r_start, r_step*n_steps+1, r_step) # +1 to get the end values of the range for legends
    
    data = results[:,1:] # Skip first column, which is the timestep
    timestep = results[:,0] # First column is timestep
    time = timestep*time_between_statefiles

    # n = np.shape(data)[1] # Number of data sets (different distances from SiO2 matrix)
    #print "N = " + str(n)

    return time, data, r_vector
    
def remove_nan(data, r_vector):

    if (type(data) is list):
        # remove columns/data sets with nan in them
        to_delete = []
        for dataset in data:
            for i in range(np.shape(dataset)[1]):
                if any(math.isnan(number) for number in dataset[:,i]):
                    to_delete.append(i)

        to_delete = np.unique(to_delete)

        for idx in range(len(data)):
            data[idx] = np.delete(data[idx], (to_delete), axis=1)
            r_vector[idx] = np.delete(r_vector[idx], to_delete)

        print "Deleted columns = " + str(to_delete)
        
        # n = np.shape(data)[1]
        #print "N = " + str(n)
    else:
        print "Wrong data type"

    return data, r_vector


## Load data

# top_cwd = "/home/fsund/Dropbox/Masteroppgave/master/notebooks"
initial_cwd = os.getcwd()
cwd = "/home/fsund/Dropbox/Masteroppgave/master/notebooks/diffusion"
os.chdir(cwd)
print os.getcwd()

datasets = []
r_vectors = []

r_start = 0.0
r_step = 0.50
n_steps = 30
i = 0

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
project_name = "flat_square_fracture02"
states_folder = "10_05_measuring_every_100th_timestep_200steps"
partial_output_folder = os.path.join(project_name, states_folder)
partial_output_folder = os.path.join(partial_output_folder, "r0_%.2f_dr%.2f_n%d" %(r_start,r_step, n_steps))
results_file = "%s_%03d/results.txt" %(partial_output_folder, i)
print results_file

time, data, r_vector = load_results(results_file = results_file, n_timesteps_between_statefiles = 100, 
                             r_start = r_start, r_step = r_step, n_steps = n_steps)
datasets.append(data)
r_vectors.append(r_vector)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
project_name = "rough_fracture01_abel"
states_folder = "12_04_measuring_every_100th_timestep_200steps"
partial_output_folder = os.path.join(project_name, states_folder)
partial_output_folder = os.path.join(partial_output_folder, "r0_%.2f_dr%.2f_n%d" %(r_start,r_step, n_steps))

output_path = "%s__%03d/" %(partial_output_folder, i)
results_file = "%s_%03d/results.txt" %(partial_output_folder, i)
print results_file

time, data, r_vector = load_results(results_file = results_file, n_timesteps_between_statefiles = 100, 
                             r_start = r_start, r_step = r_step, n_steps = n_steps)

datasets.append(data)
r_vectors.append(r_vector)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 

datasets, r_vectors = remove_nan(datasets, r_vectors)
os.chdir(initial_cwd)

## Fig size
default_fig_size = np.array([8.0, 6.0]) # inches
inchtomm = 25.4 # mm per inch
a4width = 210   # mm
left = 28       # mm, margin
right = 37.5    # mm, margin
textwidth = a4width - (left+right)
print "textwidth = " + str(textwidth) + "mm"
figwidth = 0.95*textwidth
reduction_factor = default_fig_size[0]/(figwidth/inchtomm)
reduction_factor = 2
print "reduction_factor = " + str(reduction_factor)

fig = plt.figure(1, figsize = default_fig_size/reduction_factor)

ax = fig.add_subplot(111)

timesteps_to_average_over = 25
for data_idx, data in enumerate(datasets):

    # Only plot 5 lines, but include last column of data, which is bulk
    n = np.shape(data)[1]
    n_max = 5
    if n >= 10:
        indices = np.arange(0, n, n/float(n_max), dtype = int)
        indices = list(indices)
    else:
        indices = range(0, n)
    if (indices[-1] != (n-1)):
        indices.append(n-1)
        
    print "Columns = " + str(indices)

    mean_diff = np.zeros(len(indices))
    for idx, idx_to_use in enumerate(indices):
        diffusion = data[:, idx_to_use]/(6*time)
        mean_diff[idx] = np.mean(diffusion[timesteps_to_average_over:-1])

    ax.plot(r_vectors[data_idx][indices], mean_diff, '-o')

ax.legend(["Flat fracture", "Rough fracture"], loc = "best", framealpha = 0.0)
ax.set_xlabel("\$r\\text{ [\AA]}\$")
ax.set_ylabel("\$D\\text{ [\AA\$^2\$/ps]}\$")
ax.set_title("Diffusion constant")

from matplotlib.ticker import MaxNLocator
ax.xaxis.set_major_locator(MaxNLocator(6))
# ax.yaxis.set_major_locator(MaxNLocator(6))

if backend == default_backend:
    plt.show()
elif backend == "SVG":
    fig.savefig("diffusion_constant.svg", bbox_inches = "tight")
