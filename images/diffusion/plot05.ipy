import numpy as np
import math
import os.path

default_backend = 'Qt4Agg'
default_fig_size = np.array([8.0, 6.0]) # inches

backend = 'SVG'
# backend = default_backend

import matplotlib
matplotlib.use(backend)
matplotlib.rcParams['svg.fonttype'] = 'none' # To make text in the resulting svg actual text, instead of a path. 
matplotlib.rcParams['savefig.dpi'] = 150

import matplotlib.pyplot as plt
if backend == default_backend:
    plt.ion()

def load_results(results_file, r_start, r_step, n_steps, n_timesteps_between_statefiles = 100):
    dt = 20.67 # atomic unit of time
    atomic_unit_of_time = 2.418884326505e-17 # seconds
    timestep = dt*atomic_unit_of_time
    time_between_statefiles = timestep*n_timesteps_between_statefiles/(1.0e-12) # picoseconds
    
    results = np.genfromtxt( # makes np.ndarray
        results_file,
        comments = '#', # Skip characters after #
    )
    results = results[1:-1] # Skip first line, since t and msd = 0 (divide by 6t goes bad)

    timestep = results[:,0]
    time = timestep*time_between_statefiles
    data  = results[:,1:]
    
    r_vector = np.arange(r_start, r_step*n_steps+1, r_step) # +1 to get the end values of the range for legends

    return time, data, r_vector
    
def remove_nan(data, r_vector):

    if (type(data) is list):
        # remove columns/data sets with nan in them
        to_delete = []
        for dataset in data:
            for i in range(np.shape(dataset)[1]): # loop over columns
                if np.any(np.isnan(dataset[:,i])):
                    to_delete.append(i)

        to_delete = np.unique(to_delete) # Since we check for nan in all datasets

        for idx in range(len(data)):
            data[idx] = np.delete(data[idx], (to_delete), axis=1)
            r_vector[idx] = np.delete(r_vector[idx], to_delete)

        print "Deleted columns = " + str(to_delete)
        print "New shape = " + str(np.shape(data[0]))
        print "New shape = " + str(np.shape(data[1]))

    else:
        print "Wrong data type"

    return data, r_vector


## Load data

# Change working dir
initial_cwd = os.getcwd()
cwd = "/home/fsund/Dropbox/Masteroppgave/master/notebooks/diffusion"
os.chdir(cwd)
print "Changed cwd to: \n    " + os.getcwd()

datasets = []
r_vectors = []

# Load flat fracture
project_name = "flat_square_fracture02"
states_folder = "10_05_measuring_every_100th_timestep_200steps"
partial_output_folder = os.path.join(project_name, states_folder)

r_start = 0.0
r_step = 0.50
n_steps = 30
partial_output_folder = os.path.join(partial_output_folder, "r0_%.2f_dr%.2f_n%d" %(r_start,r_step, n_steps))

i = 0
output_path = "%s__%03d/" %(partial_output_folder, i)
results_file = "%s_%03d/results.txt" %(partial_output_folder, i)
print "\nLoading file: \n    " + results_file

time, data, r_vector = load_results(results_file = results_file, n_timesteps_between_statefiles = 100, 
                             r_start = r_start, r_step = r_step, n_steps = n_steps)
datasets.append(data)
r_vectors.append(r_vector)

# Load rough fracture
project_name = "rough_fracture01_abel"
states_folder = "12_04_measuring_every_100th_timestep_200steps"
partial_output_folder = os.path.join(project_name, states_folder)

r_start = 0.0
r_step = 0.50
n_steps = 30
partial_output_folder = os.path.join(partial_output_folder, "r0_%.2f_dr%.2f_n%d" %(r_start,r_step, n_steps))

i = 0
output_path = "%s__%03d/" %(partial_output_folder, i)
results_file = "%s_%03d/results.txt" %(partial_output_folder, i)
print "\nLoading file: \n    " + results_file

time, data, r_vector = load_results(results_file = results_file, n_timesteps_between_statefiles = 100, 
                             r_start = r_start, r_step = r_step, n_steps = n_steps)

datasets.append(data)
r_vectors.append(r_vector)

# Remove nan
print
datasets, r_vectors = remove_nan(datasets, r_vectors)

# Change back to initial working dir
os.chdir(initial_cwd)

# Line colors, styles and markers
colors = ('k','y','m','c','b','g','r','#aaaaaa')
linestyles = ('-','--','-.',':')
markers = ('o', 'v', '^', '<', '>', '1', '2', '3', '4', '8', 's', 'p', '*', 'h', 'H', '+', 'x', 'D', 'd', '|', '_', 'TICKLEFT', 'TICKRIGHT', 'TICKUP', 'TICKDOWN', 'CARETLEFT', 'CARETRIGHT', 'CARETUP', 'CARETDOWN')

# Create figure and axis
reduction_factor = 1.6
fig = plt.figure(figsize = default_fig_size/reduction_factor)
ax = fig.add_subplot(111)

# Loop over datasets and plot
for data_idx, data in enumerate(datasets):

    # Only plot 5 lines, but include last column of data, which is bulk
    n = np.shape(data)[1]
    n_max = 5
    indices = list(np.arange(0, n, float(n)/float(n_max), dtype = int))

    # Make sure bulk data is included
    bulk_column = np.shape(data)[1] - 1
    if (indices[-1] != bulk_column):
        indices.append(bulk_column)

    print "Columns to be plotted = " + str(indices)
    
    legends = []
    latex_legends = []
    for idx, idx_to_use in enumerate(indices):
        y = data[:,idx_to_use]
        y = y/(6.0*time)
        ax.plot(time, y, color = colors[idx], linestyle = linestyles[data_idx])
        
        legendstring = "r = [%.1f, %.1f)" %(r_vector[idx_to_use], r_vector[idx_to_use+1])
        legends.append(legendstring)
        latex_legends.append("{\\f \$" + legendstring + "\$}")
    
    legends[-1] = "Bulk"
    latex_legends[-1] = "{\\f Bulk}"


## MAKE AWESOME LEGENDS
fontsize = "small"

# First leg matplotlib place the legend, make frame, etc.
leg = ax.legend(
    legends,
    fontsize = fontsize,
    loc = "upper right",
)
plt.draw() # To update figure, so bbox below has correct placement and size

# Get dimensions and position of frame and bbox, in axes coordinates 
# (which is default transform when changing bbox for legend)
bb = leg.legendPatch.get_bbox().inverse_transformed(ax.transAxes)

# Place latex legend, where we want it
leg = ax.legend(
    latex_legends, 
    fontsize = fontsize,
    loc = "lower left",
    bbox_to_anchor = [bb.x0, bb.y0],
    borderaxespad = 0.0,    # Important to get correct placement
    framealpha = 0.0,       # Remove matplotlib's auto frame, which is too large because latex legends...
)
plt.draw()

print bb.get_points()

# Make custom frame
import matplotlib.transforms as mtransforms
bb = mtransforms.Bbox([[bb.x0, bb.y0], [bb.x1, bb.y1]])

from matplotlib.patches import FancyBboxPatch
p_bbox = FancyBboxPatch(
    (bb.x0, bb.y0),
    abs(bb.width), abs(bb.height),
    transform = ax.transAxes,       # Default (?)
    boxstyle = "square,pad=0",
    ec = "k", fc = "w",
    zorder = 1000
)
ax.add_patch(p_bbox)
leg.set_zorder(1001)
plt.draw()
## LEGENDS DONE

# Title and axis labels
plt.title("Diffusion \$r^2(t)/6t\$")
ax.set_xlabel("\$t\$ [ps]")
ax.set_ylabel("\$r^2/6t\$ [\AA\$^2\$/ps]")

# Axis ticks
from matplotlib.ticker import MultipleLocator
majorLocator = MultipleLocator(0.1)
ax.yaxis.set_major_locator(majorLocator)

from matplotlib.ticker import AutoMinorLocator
minorLocator = MultipleLocator(0.05)
# minorLocator = AutoMinorLocator()
ax.yaxis.set_minor_locator(minorLocator)

minorLocator = MultipleLocator(1)
ax.xaxis.set_minor_locator(minorLocator)

# Add grid
ax.xaxis.grid(True)
ax.yaxis.grid(True)

if backend == default_backend:
    plt.show()
elif backend == "SVG":
    fig.savefig("diffusion.svg", bbox_inches='tight')
