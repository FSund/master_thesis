import numpy as np
import math

default_backend = 'Qt4Agg'
backend = default_backend
backend = 'SVG'
# backend = 'AGG'

if backend == "SVG":
    import matplotlib
    matplotlib.use(backend)
    matplotlib.rcParams['svg.fonttype'] = 'none'    # To make text in the resulting svg actual text, instead of a path.
    matplotlib.rcParams['savefig.dpi'] = 120        # Doesn't affect svg backend
    matplotlib.rcParams['text.usetex'] = False      # To stop matplotlib from interpreting latex. Still interprets some stuff inside $$ though... Escape with \$ to get dollar signs in text.

import matplotlib.pyplot as plt

if backend == default_backend:
    plt.ion()


def load_results_and_calculate_mean(data_files):

    # Load first file to find dimensions and r_vector. All files should have same r_vector, or the programmer has done something wrong
    data = np.genfromtxt( # makes np.ndarray
            data_files[0],
            comments = '#', # Skip characters after #
    )
    # Columns in data files:
    # r  n_atoms  number_density[atoms/Angstrom^3]  density[kg/m^3]
    r_vector        = data[:,0]
    n_atoms         = data[:,1]
    number_density  = data[:,2]
    density         = data[:,3]

    # Load data from the rest of the files, and add to sum for mean
    for idx, data_file in enumerate(data_files[1:]):
    
        data = np.genfromtxt( # makes np.ndarray
            data_file,
            # names = True, #  If `names` is True, the field names are read from the first valid line
            comments = '#', # Skip characters after #
            # delimiter = '\t', # tab separated values
            # dtype = None # guess the dtype of each column
        )
        n_atoms += data[:,1]
        density += data[:,3]

    density /= len(data_files)
    n_atoms /= len(data_files)

    return r_vector, density, n_atoms


## Parameters
n_timesteps_between_states = 100
input_folders = [ \
    # "rough_fracture01_abel/12_04_measuring_every_100th_timestep_200steps/new_dr0.25_n40_000/",
    "rough_fracture03/10_01_measuring_every_100th_timestep_200steps/new_dr0.25_n40_000/",
    # "rough_fracture04_same_distance/10_01_measuring_every_100th_timestep_200steps/new_dr0.25_n40_000/",
    # "rough_fracture05/10_01_measuring_every_100th_timestep_200steps/new_dr0.25_n40_000/",
    # "flat_fracture02/10_01_measuring_every_100th_timestep/new_dr0.25_n40_000/",
    # "flat_fracture03/10_01_measuring_every_100th_timestep/new_dr0.25_n40_000/",
    # "flat_square_fracture02/10_05_measuring_every_100th_timestep_200steps/new_dr0.25_n40_000/",
    "flat_square_fracture03/10_01_measuring_every_100th_timestep/new_dr0.25_n40_000/",
]

results_folder = "/home/fsund/Dropbox/Masteroppgave/master/analysis/density/new_results/"
input_folders = [results_folder + input_folders[i] for i in range(len(input_folders))]
# legends = [r"Rough \#2", r"Flat \#2"]
legends = [r"Rough fracture", r"Flat fracture"]


## Load results
r_vectors = []
mean_densities = []
n_tagged_atoms = []

for input_folder in input_folders:
    data_files = !find $input_folder -maxdepth 1 -name 'output_*.txt' | sort
    r_vector, mean_density, n_atoms = load_results_and_calculate_mean(data_files)
    r_vectors.append(r_vector)
    mean_densities.append(mean_density)
    n_tagged_atoms.append(n_atoms)

## Plot
default_fig_size = np.array([8.0, 6.0]) # inches

# inchtomm = 25.4 # mm per inch
# a4width = 210   # mm
# left = 28       # mm, margin
# right = 37.5    # mm, margin
# textwidth = a4width - (left+right)
# # print "textwidth = " + str(textwidth) + "mm"
# figwidth = 0.8*textwidth
# reduction_factor = default_fig_size[0]/(figwidth/inchtomm)

reduction_factor = np.array([1.6, 2.5])*0.9
# print "reduction_factor = " + str(reduction_factor)

# Create objects
n_figs = 1
figs = []
axes = []
for i in range(n_figs):
    figs.append(plt.figure(figsize = default_fig_size/reduction_factor))
    axes.append(figs[i].add_subplot(111))


linestyles = ["-", "-", "--", "--"]

# Loop over systems
for system, density in enumerate(mean_densities):
    r = r_vectors[system]

    # Only plot data in certain r-range
    # min_distance = 0.0
    min_distance = 0.0
    max_distance = 25.0

    istart = np.where(r >= min_distance)[0][0]
    istop = np.where(r <= max_distance)[0][-1] + 1  # add 1 to include end of range

    axes[0].plot(r[istart:istop], n_tagged_atoms[system][istart:istop]/1000.0,
        label = legends[system],
        linestyle = linestyles[system],
    )

ax = axes[0]
ax.set_ylim([0, 1])
ax.legend(legends, loc = 'best', fancybox = True)
# ax.legend(legends, loc = 'center left', fancybox = True,
#     bbox_to_anchor = (1.0, 0.5),
#     # bbox_transform = 
# )
ax.set_xlabel(r"Distance from silica matrix [\AA]")
ax.set_ylabel(r"Number of molecules [k]")
ax.set_title(r"Number of molecules in each bin")

if backend == default_backend:
    plt.show()
else:
    # figs[0].savefig("density_water02.svg", bbox_inches = "tight")
    # figs[1].savefig("density_water_normalized02.svg", bbox_inches = "tight")
    figs[0].savefig("number_of_molecules_all_distances02", bbox_inches = "tight")