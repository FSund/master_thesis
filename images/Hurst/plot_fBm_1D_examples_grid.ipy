import numpy as np

default_fig_size = np.array([8.0, 6.0]) # inches
default_backend = 'Qt4Agg'
backend = default_backend
backend = 'SVG'

import matplotlib
matplotlib.use(backend)
matplotlib.rcParams['svg.fonttype'] = 'none' # To make text in the resulting svg actual text, instead of a path. 
matplotlib.rcParams['savefig.dpi'] = 150 # Doesn't apply when using svg backend?

import matplotlib.pyplot as plt
from matplotlib.gridspec import GridSpec

if backend == default_backend:
    plt.ion()

Hvec = np.linspace(0, 1, 5)
Hvec = [0.0, 0.25, 0.5, 1.0]

n_rows = 2
n_cols = 2
gs = GridSpec(n_rows, n_cols)
gs.update(wspace=0.03, hspace=0.05) # remove spacing
# gs.update(hspace = 20)
# gs.update(h_pad = 20)

fig = plt.figure(figsize = default_fig_size/1.6)
plt.suptitle("fBm, Hurst exponent",
    x = 0.5, y = 0.97
)

axes = []
[axes.append([None]*n_cols) for i in range(n_rows)]

axes[1][0] = fig.add_subplot(gs[1, 0]) # bottom left

axes[1][1] = fig.add_subplot(gs[1, 1], sharex = axes[1][0]) # bottom right
axes[0][0] = fig.add_subplot(gs[0, 0], sharex = axes[1][0]) # upper left
axes[0][1] = fig.add_subplot(gs[0, 1], sharex = axes[1][0]) # upper right

plt.setp(axes[0][0].get_xticklabels(), visible=False)
plt.setp(axes[0][1].get_xticklabels(), visible=False)

axes[0][1].yaxis.tick_right() # removes some ticks?
axes[1][1].yaxis.tick_right()
axes[0][1].yaxis.set_ticks_position('both')
axes[1][1].yaxis.set_ticks_position('both')

for i in range(n_rows):
    axes[i][-1].yaxis.set_tick_params(pad = 21)
    for label in axes[i][-1].yaxis.get_ticklabels():
        label.set_horizontalalignment('right')



# axes[0][1].yaxis.set_label_position("right") # doesn't work?
# axes[1][1].yaxis.set_label_position("right")

from mpl_toolkits.axes_grid.anchored_artists import AnchoredText
locs = [3, 3, 3, 3]
for idx, H in enumerate(Hvec):
    
    fBm = np.genfromtxt("fBm_1D_H%1.2f.txt" % H)

    ax = axes[idx/n_cols][idx%n_cols]
    ax.plot(fBm[:100, :4])

    # Add text box
    # ax.text(s = "H = %1.2f" %Hvec[idx] , x=0.08, y=0.82, transform = ax.transAxes, 
        # bbox=dict(facecolor='white', edgecolor='black', boxstyle = 'round')
    # )

    # at = AnchoredText("H =",
        # prop=dict(size=8), frameon=True,
        # loc='upper left',
    # )
    at = AnchoredText(s = "H = %1.2f" % H, loc = locs[idx], prop = dict())
    at.patch.set_boxstyle("round,pad=0.,rounding_size=0.2")
    ax.add_artist(at)

# at = AnchoredText(s = "H =", loc = 1, prop = dict(size=8))
# plt.gca().add_artist(at)

# Axis ticks and labels
from matplotlib.ticker import MultipleLocator, MaxNLocator, FormatStrFormatter
xMajorLocator = MultipleLocator(25)

mainAx = axes[1][0]
mainAx.set_xticks([25, 50,75])

axes[0][0].yaxis.set_major_locator(MultipleLocator(4))
axes[0][1].yaxis.set_major_locator(MultipleLocator(3))
axes[1][0].yaxis.set_major_locator(MultipleLocator(3))
axes[1][1].yaxis.set_major_locator(MultipleLocator(20))

majorFormatter = FormatStrFormatter('%d')
axes[0][1].yaxis.set_major_formatter(majorFormatter)
axes[1][1].yaxis.set_major_formatter(majorFormatter)

lim = 7.3
axes[0][1].set_ylim([-lim, lim])
axes[1][0].set_ylim([-lim, lim])

axes[0][0].set_ylim([-5, 9])
axes[1][1].set_ylim([-45, 25])

# fig.text(s = "Q \\hl{???}", x=0.5, y=0.06, transform = fig.transFigure, ha = "center", va = "center")

# Axis labels
# fig.text(s = "n", x=0.5, y=0.06, transform = fig.transFigure, ha = "center", va = "center")
fig.text(s = "n", x=0.5, y=0.005, transform = axes[0][0].transAxes, ha = "center", va = "center")
# fig.text(s = "fBm", x=0.04, y=0.5, rotation = "vertical", transform = fig.transFigure, ha = "center", va = "center")
fig.text(s = "fBm", x=0.04, y=0.5, rotation = "vertical", transform = axes[0][0].transScale, ha = "center", va = "center")

if backend == default_backend:
    plt.show()
else:
    fig.savefig("fbm_1d_examples_grid.svg", bbox_inches='tight')